def func1(arg1, arg2):
    def func2(arg3, arg4):
        var5 = func5()
        var32 = var8(var5, arg1)
        result = var5 + ((arg3 - arg4) - -883381645) + var5
        return result
    var33 = func2(arg2, arg1)
    var34 = arg1 + -1360421161
    var35 = arg2 & arg1
    if arg2 < var33:
        var36 = var35 - arg2 - var33
    else:
        var36 = 12 | (var34 | arg2) & var33
    var37 = arg2 | -171 + var35 + arg1
    var38 = (342 & var37) - var37 ^ arg1
    var39 = ((var33 ^ var37) | var34) - var34
    if var39 < var33:
        var40 = ((var33 ^ arg1) - arg2) & var34
    else:
        var40 = (-8 - var34) + var35 + -513
    var41 = var37 - var33
    var42 = var33 - var37 - var41
    if var34 < arg1:
        var43 = var37 - -292618667 - var35
    else:
        var43 = var37 | 73
    var44 = (var35 - var35 ^ var41) ^ var35
    result = (var35 & ((((((904 | var39) + var39) | arg2) & var37) | var38 - var37) | var38 ^ var42) | var42) - var34
    return result
def func8(arg9, arg10):
    var15 = func9(arg10, arg9)
    var29 = func10(var15, arg10)
    var30 = 683 ^ 1852381861
    var31 = ((var30 - (arg10 - arg9 - (var15 - var29)) | var15) - -667) | 1899170486 | 728
    result = var29 | var29 - -63220493 & var15
    return result
def func10(arg16, arg17):
    var18 = arg16 | -1434656624
    var19 = 1142126975 ^ (arg17 + var18)
    if arg17 < arg16:
        var20 = (arg16 | 197005494) - var18
    else:
        var20 = arg17 & (arg17 | var19) & var18
    var21 = var18 & (223365540 ^ arg16) | arg17
    var22 = (var21 - var19 & arg16) & var19
    var23 = 681656926 & var22
    var24 = arg16 & (var18 + var18 & var21)
    var25 = (var23 & (var22 & arg16)) + var24
    var26 = var21 - (arg16 ^ -742554740) - var21
    var27 = (var26 & -1057945056 ^ 108) + var21
    var28 = (var22 & var25 ^ var25) - var24
    result = arg17 ^ ((arg16 ^ var22 + var18 ^ var23 ^ var21 ^ arg17) | arg17 & var24) | var25 | arg16 ^ var25
    return result
def func9(arg11, arg12):
    var13 = 0
    for var14 in xrange(11):
        var13 += -3 ^ -9
    return var13
def func7():
    closure = [-7]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(range(38))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var5 = func5()
        var32 = var8(var5, arg1)
        result = var5 + ((arg3 - arg4) - -883381645) + var5
        return result
    var33 = func2(arg2, arg1)
    var34 = arg1 + -1360421161
    var35 = arg2 & arg1
    if arg2 < var33:
        var36 = var35 - arg2 - var33
    else:
        var36 = 12 | (var34 | arg2) & var33
    var37 = arg2 | -171 + var35 + arg1
    var38 = (342 & var37) - var37 ^ arg1
    var39 = ((var33 ^ var37) | var34) - var34
    if var39 < var33:
        var40 = ((var33 ^ arg1) - arg2) & var34
    else:
        var40 = (-8 - var34) + var35 + -513
    var41 = var37 - var33
    var42 = var33 - var37 - var41
    if var34 < arg1:
        var43 = var37 - -292618667 - var35
    else:
        var43 = var37 | 73
    var44 = (var35 - var35 ^ var41) ^ var35
    result = (var35 & ((((((904 | var39) + var39) | arg2) & var37) | var38 - var37) | var38 ^ var42) | var42) - var34
    return result
def func8(arg9, arg10):
    var15 = func9(arg10, arg9)
    var29 = func10(var15, arg10)
    var30 = 683 ^ 1852381861
    var31 = ((var30 - (arg10 - arg9 - (var15 - var29)) | var15) - -667) | 1899170486 | 728
    result = var29 | var29 - -63220493 & var15
    return result
def func10(arg16, arg17):
    var18 = arg16 | -1434656624
    var19 = 1142126975 ^ (arg17 + var18)
    if arg17 < arg16:
        var20 = (arg16 | 197005494) - var18
    else:
        var20 = arg17 & (arg17 | var19) & var18
    var21 = var18 & (223365540 ^ arg16) | arg17
    var22 = (var21 - var19 & arg16) & var19
    var23 = 681656926 & var22
    var24 = arg16 & (var18 + var18 & var21)
    var25 = (var23 & (var22 & arg16)) + var24
    var26 = var21 - (arg16 ^ -742554740) - var21
    var27 = (var26 & -1057945056 ^ 108) + var21
    var28 = (var22 & var25 ^ var25) - var24
    result = arg17 ^ ((arg16 ^ var22 + var18 ^ var23 ^ var21 ^ arg17) | arg17 & var24) | var25 | arg16 ^ var25
    return result
def func9(arg11, arg12):
    var13 = 0
    for var14 in xrange(11):
        var13 += -3 ^ -9
    return var13
def func7():
    closure = [-7]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(range(38))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var5 = func5()
        var32 = var8(var5, arg1)
        result = var5 + ((arg3 - arg4) - -883381645) + var5
        return result
    var33 = func2(arg2, arg1)
    var34 = arg1 + -1360421161
    var35 = arg2 & arg1
    if arg2 < var33:
        var36 = var35 - arg2 - var33
    else:
        var36 = 12 | (var34 | arg2) & var33
    var37 = arg2 | -171 + var35 + arg1
    var38 = (342 & var37) - var37 ^ arg1
    var39 = ((var33 ^ var37) | var34) - var34
    if var39 < var33:
        var40 = ((var33 ^ arg1) - arg2) & var34
    else:
        var40 = (-8 - var34) + var35 + -513
    var41 = var37 - var33
    var42 = var33 - var37 - var41
    if var34 < arg1:
        var43 = var37 - -292618667 - var35
    else:
        var43 = var37 | 73
    var44 = (var35 - var35 ^ var41) ^ var35
    result = (var35 & ((((((904 | var39) + var39) | arg2) & var37) | var38 - var37) | var38 ^ var42) | var42) - var34
    return result
def func8(arg9, arg10):
    var15 = func9(arg10, arg9)
    var29 = func10(var15, arg10)
    var30 = 683 ^ 1852381861
    var31 = ((var30 - (arg10 - arg9 - (var15 - var29)) | var15) - -667) | 1899170486 | 728
    result = var29 | var29 - -63220493 & var15
    return result
def func10(arg16, arg17):
    var18 = arg16 | -1434656624
    var19 = 1142126975 ^ (arg17 + var18)
    if arg17 < arg16:
        var20 = (arg16 | 197005494) - var18
    else:
        var20 = arg17 & (arg17 | var19) & var18
    var21 = var18 & (223365540 ^ arg16) | arg17
    var22 = (var21 - var19 & arg16) & var19
    var23 = 681656926 & var22
    var24 = arg16 & (var18 + var18 & var21)
    var25 = (var23 & (var22 & arg16)) + var24
    var26 = var21 - (arg16 ^ -742554740) - var21
    var27 = (var26 & -1057945056 ^ 108) + var21
    var28 = (var22 & var25 ^ var25) - var24
    result = arg17 ^ ((arg16 ^ var22 + var18 ^ var23 ^ var21 ^ arg17) | arg17 & var24) | var25 | arg16 ^ var25
    return result
def func9(arg11, arg12):
    var13 = 0
    for var14 in xrange(11):
        var13 += -3 ^ -9
    return var13
def func7():
    closure = [-7]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(range(38))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var5 = func5()
        var32 = var8(var5, arg1)
        result = var5 + ((arg3 - arg4) - -883381645) + var5
        return result
    var33 = func2(arg2, arg1)
    var34 = arg1 + -1360421161
    var35 = arg2 & arg1
    if arg2 < var33:
        var36 = var35 - arg2 - var33
    else:
        var36 = 12 | (var34 | arg2) & var33
    var37 = arg2 | -171 + var35 + arg1
    var38 = (342 & var37) - var37 ^ arg1
    var39 = ((var33 ^ var37) | var34) - var34
    if var39 < var33:
        var40 = ((var33 ^ arg1) - arg2) & var34
    else:
        var40 = (-8 - var34) + var35 + -513
    var41 = var37 - var33
    var42 = var33 - var37 - var41
    if var34 < arg1:
        var43 = var37 - -292618667 - var35
    else:
        var43 = var37 | 73
    var44 = (var35 - var35 ^ var41) ^ var35
    result = (var35 & ((((((904 | var39) + var39) | arg2) & var37) | var38 - var37) | var38 ^ var42) | var42) - var34
    return result
def func8(arg9, arg10):
    var15 = func9(arg10, arg9)
    var29 = func10(var15, arg10)
    var30 = 683 ^ 1852381861
    var31 = ((var30 - (arg10 - arg9 - (var15 - var29)) | var15) - -667) | 1899170486 | 728
    result = var29 | var29 - -63220493 & var15
    return result
def func10(arg16, arg17):
    var18 = arg16 | -1434656624
    var19 = 1142126975 ^ (arg17 + var18)
    if arg17 < arg16:
        var20 = (arg16 | 197005494) - var18
    else:
        var20 = arg17 & (arg17 | var19) & var18
    var21 = var18 & (223365540 ^ arg16) | arg17
    var22 = (var21 - var19 & arg16) & var19
    var23 = 681656926 & var22
    var24 = arg16 & (var18 + var18 & var21)
    var25 = (var23 & (var22 & arg16)) + var24
    var26 = var21 - (arg16 ^ -742554740) - var21
    var27 = (var26 & -1057945056 ^ 108) + var21
    var28 = (var22 & var25 ^ var25) - var24
    result = arg17 ^ ((arg16 ^ var22 + var18 ^ var23 ^ var21 ^ arg17) | arg17 & var24) | var25 | arg16 ^ var25
    return result
def func9(arg11, arg12):
    var13 = 0
    for var14 in xrange(11):
        var13 += -3 ^ -9
    return var13
def func7():
    closure = [-7]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(range(38))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var5 = func5()
        var32 = var8(var5, arg1)
        result = var5 + ((arg3 - arg4) - -883381645) + var5
        return result
    var33 = func2(arg2, arg1)
    var34 = arg1 + -1360421161
    var35 = arg2 & arg1
    if arg2 < var33:
        var36 = var35 - arg2 - var33
    else:
        var36 = 12 | (var34 | arg2) & var33
    var37 = arg2 | -171 + var35 + arg1
    var38 = (342 & var37) - var37 ^ arg1
    var39 = ((var33 ^ var37) | var34) - var34
    if var39 < var33:
        var40 = ((var33 ^ arg1) - arg2) & var34
    else:
        var40 = (-8 - var34) + var35 + -513
    var41 = var37 - var33
    var42 = var33 - var37 - var41
    if var34 < arg1:
        var43 = var37 - -292618667 - var35
    else:
        var43 = var37 | 73
    var44 = (var35 - var35 ^ var41) ^ var35
    result = (var35 & ((((((904 | var39) + var39) | arg2) & var37) | var38 - var37) | var38 ^ var42) | var42) - var34
    return result
def func8(arg9, arg10):
    var15 = func9(arg10, arg9)
    var29 = func10(var15, arg10)
    var30 = 683 ^ 1852381861
    var31 = ((var30 - (arg10 - arg9 - (var15 - var29)) | var15) - -667) | 1899170486 | 728
    result = var29 | var29 - -63220493 & var15
    return result
def func10(arg16, arg17):
    var18 = arg16 | -1434656624
    var19 = 1142126975 ^ (arg17 + var18)
    if arg17 < arg16:
        var20 = (arg16 | 197005494) - var18
    else:
        var20 = arg17 & (arg17 | var19) & var18
    var21 = var18 & (223365540 ^ arg16) | arg17
    var22 = (var21 - var19 & arg16) & var19
    var23 = 681656926 & var22
    var24 = arg16 & (var18 + var18 & var21)
    var25 = (var23 & (var22 & arg16)) + var24
    var26 = var21 - (arg16 ^ -742554740) - var21
    var27 = (var26 & -1057945056 ^ 108) + var21
    var28 = (var22 & var25 ^ var25) - var24
    result = arg17 ^ ((arg16 ^ var22 + var18 ^ var23 ^ var21 ^ arg17) | arg17 & var24) | var25 | arg16 ^ var25
    return result
def func9(arg11, arg12):
    var13 = 0
    for var14 in xrange(11):
        var13 += -3 ^ -9
    return var13
def func7():
    closure = [-7]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(range(38))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var5 = func5()
        var32 = var8(var5, arg1)
        result = var5 + ((arg3 - arg4) - -883381645) + var5
        return result
    var33 = func2(arg2, arg1)
    var34 = arg1 + -1360421161
    var35 = arg2 & arg1
    if arg2 < var33:
        var36 = var35 - arg2 - var33
    else:
        var36 = 12 | (var34 | arg2) & var33
    var37 = arg2 | -171 + var35 + arg1
    var38 = (342 & var37) - var37 ^ arg1
    var39 = ((var33 ^ var37) | var34) - var34
    if var39 < var33:
        var40 = ((var33 ^ arg1) - arg2) & var34
    else:
        var40 = (-8 - var34) + var35 + -513
    var41 = var37 - var33
    var42 = var33 - var37 - var41
    if var34 < arg1:
        var43 = var37 - -292618667 - var35
    else:
        var43 = var37 | 73
    var44 = (var35 - var35 ^ var41) ^ var35
    result = (var35 & ((((((904 | var39) + var39) | arg2) & var37) | var38 - var37) | var38 ^ var42) | var42) - var34
    return result
def func8(arg9, arg10):
    var15 = func9(arg10, arg9)
    var29 = func10(var15, arg10)
    var30 = 683 ^ 1852381861
    var31 = ((var30 - (arg10 - arg9 - (var15 - var29)) | var15) - -667) | 1899170486 | 728
    result = var29 | var29 - -63220493 & var15
    return result
def func10(arg16, arg17):
    var18 = arg16 | -1434656624
    var19 = 1142126975 ^ (arg17 + var18)
    if arg17 < arg16:
        var20 = (arg16 | 197005494) - var18
    else:
        var20 = arg17 & (arg17 | var19) & var18
    var21 = var18 & (223365540 ^ arg16) | arg17
    var22 = (var21 - var19 & arg16) & var19
    var23 = 681656926 & var22
    var24 = arg16 & (var18 + var18 & var21)
    var25 = (var23 & (var22 & arg16)) + var24
    var26 = var21 - (arg16 ^ -742554740) - var21
    var27 = (var26 & -1057945056 ^ 108) + var21
    var28 = (var22 & var25 ^ var25) - var24
    result = arg17 ^ ((arg16 ^ var22 + var18 ^ var23 ^ var21 ^ arg17) | arg17 & var24) | var25 | arg16 ^ var25
    return result
def func9(arg11, arg12):
    var13 = 0
    for var14 in xrange(11):
        var13 += -3 ^ -9
    return var13
def func7():
    closure = [-7]
    def func6(arg6, arg7):
        closure[0] += func8(arg6, arg7)
        return closure[0]
    func = func6
    return func
var8 = func7()
def func5():
    func3()
    result = len(range(38))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
